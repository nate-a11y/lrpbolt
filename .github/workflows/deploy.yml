name: Build & Deploy LRP (beast mode)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: lrp-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Make MUI key available at build time as well (Node env)
      MUI_X_LICENSE_KEY: ${{ secrets.YOUR_MUI_PRO_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Ensure package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found; generating one‚Ä¶"
            npm install --package-lock-only --no-audit --no-fund
          fi

      # ---- Required secret gate ----
      - name: Validate required secrets
        shell: bash
        env:
          # Vite client env
          VITE_CALENDAR_API_KEY:             ${{ secrets.VITE_CALENDAR_API_KEY }}
          VITE_CALENDAR_ID:                  ${{ secrets.VITE_CALENDAR_ID }}
          VITE_FIREBASE_API_KEY:             ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN:         ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID:          ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET:      ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID:              ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_VAPID_KEY:           ${{ secrets.VITE_FIREBASE_VAPID_KEY }}
          VITE_FCM_VAPID_KEY:                ${{ secrets.VITE_FCM_VAPID_KEY }}
          VITE_GOOGLE_CLIENT_ID:             ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_API_BASE_URL:                 ${{ secrets.VITE_API_BASE_URL }}
          VITE_API_SECRET_KEY:               ${{ secrets.VITE_API_SECRET_KEY }}
          VITE_TIME_LOG_CSV:                 ${{ secrets.VITE_TIME_LOG_CSV }}
          VITE_DROP_DAILY_URL:               ${{ secrets.VITE_DROP_DAILY_URL }}
          VITE_SMS_TEST_TO:                  ${{ secrets.VITE_SMS_TEST_TO }}
          VITE_FCM_VAPID_KEY_ALT:            ${{ secrets.VITE_FCM_VAPID_KEY }}
          VITE_MUI_PRO_KEY:                  ${{ secrets.YOUR_MUI_PRO_KEY }}

          # FTP deploy
          HOSTINGER_FTP_HOST:                ${{ secrets.HOSTINGER_FTP_HOST }}
          HOSTINGER_FTP_USERNAME:            ${{ secrets.HOSTINGER_FTP_USERNAME }}
          HOSTINGER_FTP_PASSWORD:            ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          HOSTINGER_REMOTE_PATH:             ${{ secrets.HOSTINGER_REMOTE_PATH }}
        run: |
          set -euo pipefail
          required=(
            VITE_CALENDAR_API_KEY VITE_CALENDAR_ID
            VITE_FIREBASE_API_KEY VITE_FIREBASE_AUTH_DOMAIN VITE_FIREBASE_PROJECT_ID
            VITE_FIREBASE_STORAGE_BUCKET VITE_FIREBASE_MESSAGING_SENDER_ID VITE_FIREBASE_APP_ID
            VITE_API_BASE_URL VITE_API_SECRET_KEY
            VITE_TIME_LOG_CSV VITE_DROP_DAILY_URL
            VITE_GOOGLE_CLIENT_ID
            HOSTINGER_FTP_HOST HOSTINGER_FTP_USERNAME HOSTINGER_FTP_PASSWORD HOSTINGER_REMOTE_PATH
            VITE_MUI_PRO_KEY
          )
          missing=0
          for k in "${required[@]}"; do
            v="${!k:-}"; if [ -z "$v" ]; then echo "::error::Missing secret $k"; missing=1; fi
          done
          if [ "$missing" -ne 0 ]; then exit 1; fi
          echo "‚úÖ All required secrets present"

      # ---- Write Vite envs ----
      - name: Create .env and .env.production
        run: |
          # Base .env for dev/build
          cat > .env << 'EOF'
          VITE_CALENDAR_API_KEY=${{ secrets.VITE_CALENDAR_API_KEY }}
          VITE_CALENDAR_ID=${{ secrets.VITE_CALENDAR_ID }}
          VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_VAPID_KEY=${{ secrets.VITE_FIREBASE_VAPID_KEY }}
          # If you also store FCM under a different name, expose both:
          VITE_FCM_VAPID_KEY=${{ secrets.VITE_FCM_VAPID_KEY }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
          VITE_API_SECRET_KEY=${{ secrets.VITE_API_SECRET_KEY }}
          VITE_TIME_LOG_CSV=${{ secrets.VITE_TIME_LOG_CSV }}
          VITE_DROP_DAILY_URL=${{ secrets.VITE_DROP_DAILY_URL }}
          VITE_SMS_TEST_TO=${{ secrets.VITE_SMS_TEST_TO }}
          # MUI Pro license (client-side)
          VITE_MUI_PRO_KEY=${{ secrets.YOUR_MUI_PRO_KEY }}
          EOF

          # Production overrides/additions
          cat > .env.production << 'EOF'
          VITE_CALENDAR_API_KEY=${{ secrets.VITE_CALENDAR_API_KEY }}
          VITE_CALENDAR_ID=${{ secrets.VITE_CALENDAR_ID }}
          VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_VAPID_KEY=${{ secrets.VITE_FIREBASE_VAPID_KEY }}
          VITE_FCM_VAPID_KEY=${{ secrets.VITE_FCM_VAPID_KEY }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
          VITE_API_SECRET_KEY=${{ secrets.VITE_API_SECRET_KEY }}
          VITE_TIME_LOG_CSV=${{ secrets.VITE_TIME_LOG_CSV }}
          VITE_DROP_DAILY_URL=${{ secrets.VITE_DROP_DAILY_URL }}
          VITE_SMS_TEST_TO=${{ secrets.VITE_SMS_TEST_TO }}
          VITE_MUI_PRO_KEY=${{ secrets.YOUR_MUI_PRO_KEY }}
          EOF

      - name: Set build version
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          BASE_VERSION=$(jq -r '.version // "0.0.0"' package.json)
          DATE_TAG=$(date +"%Y%m%d")
          COUNT=${GITHUB_RUN_NUMBER}
          FINAL_VERSION="${BASE_VERSION}-${DATE_TAG}.${COUNT}"
          sed -i '/^VITE_APP_VERSION=/d' .env 2>/dev/null || true
          echo "VITE_APP_VERSION=$FINAL_VERSION" >> .env
          sed -i '/^VITE_APP_VERSION=/d' .env.production 2>/dev/null || true
          echo "VITE_APP_VERSION=$FINAL_VERSION" >> .env.production
          echo "version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version $FINAL_VERSION"

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm test --if-present

      - name: Build (Vite)
        env:
          # also inject MUI key explicitly to Vite process
          MUI_X_LICENSE_KEY: ${{ secrets.YOUR_MUI_PRO_KEY }}
        run: npm run build

      - name: Verify SW files exist
        run: |
          test -f dist/firebase-messaging-sw.js || { echo "::error::dist/firebase-messaging-sw.js missing"; exit 1; }
          test -f dist/manifest.webmanifest || true

      - name: Write Hostinger .htaccess
        run: |
          cat > dist/.htaccess <<'HTACCESS'
          AddType application/javascript .js .mjs
          AddType application/json .json .webmanifest
          AddType text/css .css
          AddType image/png .png
          AddType image/x-icon .ico
          AddType image/svg+xml .svg
          AddType image/webp .webp
          RewriteEngine On
          RewriteBase /
          RewriteCond %{REQUEST_FILENAME} -f [OR]
          RewriteCond %{REQUEST_FILENAME} -d
          RewriteRule ^ - [L]
          RewriteRule ^(firebase-messaging-sw\.js|sw\.js|service-worker\.js|manifest\.webmanifest|robots\.txt|sitemap\.xml)$ - [L]
          RewriteRule ^icons/ - [L]
          RewriteRule ^assets/ - [L]
          RewriteRule . /index.html [L]
          HTACCESS

      - name: Verify build output
        run: |
          [ -d "dist/assets" ] || { echo "‚ùå dist/assets missing"; exit 1; }
          ls dist/assets/main-*.js >/dev/null 2>&1 || { echo "‚ùå main-*.js not found"; exit 1; }
          echo "‚úÖ Build artifacts verified"

      - name: Validate precache/service worker
        run: |
          [ -f "dist/sw.js" ] || { echo "‚ùå sw.js missing"; exit 1; }
          echo "‚úÖ Service worker present"

      - name: Deploy to Hostinger via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: "145.223.77.125" 
          username: "u400814892.lakeridepros.xyz" 
          password: "m;0C&RhL=AL10b!q" 
          protocol: ftp
          local-dir: ./dist/
          server-dir: /public_html/
          log-level: minimal
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/*
            **/src/*

  functions:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Validate required secrets
        run: |
          set -euo pipefail
          [ -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" ] || { echo "::error::Missing GOOGLE_APPLICATION_CREDENTIALS_JSON"; exit 1; }
          [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ] || { echo "::error::Missing FIREBASE_PROJECT_ID"; exit 1; }
          echo "‚úÖ Functions secrets OK"

      - name: Write service account key
        run: |
          mkdir -p "$HOME/.gcloud"
          cat > "$HOME/.gcloud/key.json" <<'JSON'
          ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          JSON
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/.gcloud/key.json" >> "$GITHUB_ENV"

      - name: Export optional MANUAL_DROP_TOKEN
        run: |
          if [ -n "${{ secrets.MANUAL_DROP_TOKEN }}" ]; then
            echo "MANUAL_DROP_TOKEN=${{ secrets.MANUAL_DROP_TOKEN }}" >> "$GITHUB_ENV"
          fi

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@14

      - name: Install Functions deps
        working-directory: functions
        run: npm ci

      - name: Set Twilio secrets in Firebase (if present)
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN:  ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_FROM:        ${{ secrets.TWILIO_FROM }}
        run: |
          if [ -n "$TWILIO_ACCOUNT_SID" ]; then firebase functions:secrets:set TWILIO_ACCOUNT_SID <<< "$TWILIO_ACCOUNT_SID"; fi
          if [ -n "$TWILIO_AUTH_TOKEN"  ]; then firebase functions:secrets:set TWILIO_AUTH_TOKEN  <<< "$TWILIO_AUTH_TOKEN";  fi
          if [ -n "$TWILIO_FROM"        ]; then firebase functions:secrets:set TWILIO_FROM        <<< "$TWILIO_FROM";        fi

      - name: Deploy Firestore Rules 
        run: firebase deploy --only firestore:rules --project "$FIREBASE_PROJECT_ID" --non-interactive 
        env: 
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }} 
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }} 
        
      - name: Deploy Functions 
        run: firebase deploy --only functions:smsOnCreate --project "$FIREBASE_PROJECT_ID" --non-interactive 
        env: 
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }} 
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
