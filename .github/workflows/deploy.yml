name: Build & Deploy LRP (beast mode)

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'index.html'
      - 'vite.config.*'
      - 'package.json'
      - 'package-lock.json'
      - 'functions/**'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: lrp-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      functions: ${{ steps.filter.outputs.functions }}
      rules: ${{ steps.filter.outputs.rules }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            functions:
              - 'functions/**'
            rules:
              - 'firestore.rules'
              - 'firestore.indexes.json'

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run color guard (Python)
        run: |
          python3 --version
          python3 ./scripts/scan_colors.py

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Firebase emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: firebase-emulators-${{ runner.os }}-v1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: npm

      - name: Ensure package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found; generating one…"
            npm install --package-lock-only --no-audit --no-fund
          fi

      - name: Validate required secrets
        shell: bash
        env:
          VITE_CALENDAR_API_KEY:             ${{ secrets.VITE_CALENDAR_API_KEY }}
          VITE_CALENDAR_ID:                  ${{ secrets.VITE_CALENDAR_ID }}
          VITE_FIREBASE_API_KEY:             ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN:         ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID:          ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET:      ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID:              ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_VAPID_KEY:           ${{ secrets.VITE_FIREBASE_VAPID_KEY }}
          VITE_FCM_VAPID_KEY:                ${{ secrets.VITE_FCM_VAPID_KEY }}
          VITE_GOOGLE_CLIENT_ID:             ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_API_BASE_URL:                 ${{ secrets.VITE_API_BASE_URL }}
          VITE_API_SECRET_KEY:               ${{ secrets.VITE_API_SECRET_KEY }}
          VITE_TIME_LOG_CSV:                 ${{ secrets.VITE_TIME_LOG_CSV }}
          VITE_DROP_DAILY_URL:               ${{ secrets.VITE_DROP_DAILY_URL }}
          VITE_TICKETS_EMAIL_ENDPOINT:       ${{ secrets.VITE_TICKETS_EMAIL_ENDPOINT }}
          VITE_SMS_TEST_TO:                  ${{ secrets.VITE_SMS_TEST_TO }}
          VITE_ENABLE_FCM:                   ${{ secrets.VITE_ENABLE_FCM }}
          VITE_SHOW_DEBUG_PANELS:            ${{ secrets.VITE_SHOW_DEBUG_PANELS }}
          VITE_MUIX_LICENSE_KEY:             ${{ secrets.YOUR_MUI_PRO_KEY }}
          HOSTINGER_FTP_HOST:                ${{ secrets.HOSTINGER_FTP_HOST }}
          HOSTINGER_FTP_USERNAME:            ${{ secrets.HOSTINGER_FTP_USERNAME }}
          HOSTINGER_FTP_PASSWORD:            ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          HOSTINGER_REMOTE_PATH:             ${{ secrets.HOSTINGER_REMOTE_PATH }}
        run: |
          set -euo pipefail
          required=(
            VITE_CALENDAR_API_KEY VITE_CALENDAR_ID
            VITE_FIREBASE_API_KEY VITE_FIREBASE_AUTH_DOMAIN VITE_FIREBASE_PROJECT_ID
            VITE_FIREBASE_STORAGE_BUCKET VITE_FIREBASE_MESSAGING_SENDER_ID VITE_FIREBASE_APP_ID
            VITE_API_BASE_URL VITE_API_SECRET_KEY
            VITE_TIME_LOG_CSV VITE_DROP_DAILY_URL
            VITE_GOOGLE_CLIENT_ID
            HOSTINGER_FTP_HOST HOSTINGER_FTP_USERNAME HOSTINGER_FTP_PASSWORD HOSTINGER_REMOTE_PATH
            VITE_MUIX_LICENSE_KEY
          )
          missing=0
          for k in "${required[@]}"; do
            v="${!k:-}"; if [ -z "$v" ]; then echo "::error::Missing secret $k"; missing=1; fi
          done
          if [ "$missing" -ne 0 ]; then exit 1; fi
          echo "✅ All required secrets present"

      - name: Create .env and .env.production
        run: |
          cat > .env << 'EOF'
          VITE_CALENDAR_API_KEY=${{ secrets.VITE_CALENDAR_API_KEY }}
          VITE_CALENDAR_ID=${{ secrets.VITE_CALENDAR_ID }}
          VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_VAPID_KEY=${{ secrets.VITE_FIREBASE_VAPID_KEY }}
          VITE_FCM_VAPID_KEY=${{ secrets.VITE_FCM_VAPID_KEY }}
          VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
          VITE_API_SECRET_KEY=${{ secrets.VITE_API_SECRET_KEY }}
          VITE_TIME_LOG_CSV=${{ secrets.VITE_TIME_LOG_CSV }}
          VITE_DROP_DAILY_URL=${{ secrets.VITE_DROP_DAILY_URL }}
          VITE_TICKETS_EMAIL_ENDPOINT=${{ secrets.VITE_TICKETS_EMAIL_ENDPOINT }}
          VITE_SMS_TEST_TO=${{ secrets.VITE_SMS_TEST_TO }}
          VITE_ENABLE_FCM=${{ secrets.VITE_ENABLE_FCM }}
          VITE_SHOW_DEBUG_PANELS=${{ secrets.VITE_SHOW_DEBUG_PANELS }}
          VITE_MUIX_LICENSE_KEY=${{ secrets.YOUR_MUI_PRO_KEY }}
          EOF

          cp .env .env.production

      - name: Compute stamped app version (SemVer + channel + date + run + sha)
        id: ver
        shell: bash
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          BASE_VERSION=$(jq -r '.version // "0.0.0"' package.json)
          DATE=$(date -u +%Y%m%d)
          RUN=${GITHUB_RUN_NUMBER}
          SHA=$(git rev-parse --short HEAD)
          REF_NAME="${GITHUB_REF_NAME}"
          CHANNEL="canary"
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${REF_NAME}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            BASE_VERSION="${REF_NAME#v}"
            CHANNEL="release"
          else
            case "${REF_NAME}" in
              main) CHANNEL="prod" ;;
              develop|dev|beta) CHANNEL="beta" ;;
              *) CHANNEL="canary" ;;
            esac
          fi
          FINAL_VERSION="v${BASE_VERSION}-${CHANNEL}.${DATE}.${RUN}+${SHA}"
          echo "VITE_APP_VERSION=${FINAL_VERSION}" >> "$GITHUB_ENV"
          echo "app_version=${FINAL_VERSION}" >> "$GITHUB_OUTPUT"
          echo "Stamped version: ${FINAL_VERSION}"

      - name: Write public/version.json
        run: |
          mkdir -p public
          echo "{\"version\":\"${{ steps.ver.outputs.app_version }}\"}" > public/version.json

      - name: Check lockfile sync
        run: npm run lock:check

      - name: Rebuild lockfile if needed
        if: failure()
        run: npm run lock:rebuild

      - name: Install dependencies
        run: npm run ci:install

      - name: Verify WebP assets
        run: npm run images:verify

      - name: Lint
        run: |
          if npm ls eslint --depth=0 >/dev/null 2>&1; then npm run lint --if-present; else echo "Skipping lint"; fi

      - name: Firestore Rules Validation
        run: npx firebase-tools@latest emulators:exec --only firestore "echo Firestore rules valid ✔️"

      - name: Test
        run: |
          if npm ls vitest --depth=0 >/dev/null 2>&1; then npm test; else echo "Skipping tests"; fi

      - name: Build (Vite)
        env:
          DISABLE_IMG_OPT: '1'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: npm run build:prod

      - name: Upload version.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: lrp-version
          path: public/version.json

      - name: Verify web manifest exists
        run: |
          test -f dist/manifest.webmanifest || true

      - name: Write Hostinger .htaccess
        run: |
          cat > dist/.htaccess <<'HTACCESS'
          AddType application/javascript .js .mjs
          AddType application/json .json .webmanifest
          AddType text/css .css
          AddType image/png .png
          AddType image/x-icon .ico
          AddType image/svg+xml .svg
          AddType image/webp .webp
          RewriteEngine On
          RewriteBase /
          RewriteCond %{REQUEST_FILENAME} -f [OR]
          RewriteCond %{REQUEST_FILENAME} -d
          RewriteRule ^ - [L]
          RewriteRule ^(firebase-messaging-sw\.js|sw\.js|service-worker\.js|manifest\.webmanifest|robots\.txt|sitemap\.xml)$ - [L]
          RewriteRule ^icons/ - [L]
          RewriteRule ^assets/ - [L]
          RewriteRule . /index.html [L]
          HTACCESS

      - name: Verify build output
        run: |
          [ -d "dist/assets" ] || { echo "❌ dist/assets missing"; exit 1; }
          ls dist/assets/main-*.js >/dev/null 2>&1 || { echo "❌ main-*.js not found"; exit 1; }
          echo "✅ Build artifacts verified"

      - name: Validate precache/service worker
        run: |
          [ -f dist/sw.js ] || { echo "❌ sw.js missing"; exit 1; }
          echo "✅ Service worker present"

      - name: Deploy to Hostinger via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: "145.223.77.125"
          username: "u400814892.lakeridepros.xyz"
          password: "m;0C&RhL=AL10b!q"
          protocol: ftp
          local-dir: ./dist/
          server-dir: /public_html/
          log-level: minimal
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/*
            **/src/*

  functions:
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: needs.changes.outputs.functions == 'true' || needs.changes.outputs.rules == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Firebase emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: firebase-emulators-${{ runner.os }}-v1

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: |
            functions/package-lock.json

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@latest

      - name: Check lockfile sync
        run: npm run lock:check

      - name: Rebuild lockfile if needed
        if: failure()
        run: npm run lock:rebuild

      - name: Install Functions deps
        working-directory: functions
        run: npm ci

      - name: Verify Functions deps
        working-directory: functions
        run: |
          npm ls firebase-functions firebase-admin twilio nodemailer --depth=0 || true

      - name: Functions analyzer boot
        run: npx firebase-tools@latest emulators:exec --only functions "node -e \"console.log('Functions v2 analyzer ✔')\""

      - name: Set Twilio secrets in Firebase (idempotent)
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN:  ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_FROM:        ${{ secrets.TWILIO_FROM }}
        run: |
          firebase functions:secrets:set TWILIO_ACCOUNT_SID --project "$FIREBASE_PROJECT_ID" <<< "$TWILIO_ACCOUNT_SID"
          firebase functions:secrets:set TWILIO_AUTH_TOKEN  --project "$FIREBASE_PROJECT_ID" <<< "$TWILIO_AUTH_TOKEN"
          firebase functions:secrets:set TWILIO_FROM        --project "$FIREBASE_PROJECT_ID" <<< "$TWILIO_FROM"

      - name: Deploy Firestore Rules (only when BOTH functions & rules changed)
        if: needs.changes.outputs.functions == 'true' && needs.changes.outputs.rules == 'true'
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        run: firebase deploy --only firestore:rules --project "$FIREBASE_PROJECT_ID" --non-interactive

      - name: Force rebuild by touching function files
        if: needs.changes.outputs.functions == 'true'
        run: |
          # Touch all function files to force Firebase to detect changes
          find functions -name '*.js' -type f -exec touch {} +
          echo "Touched all JS files in functions directory to force rebuild"

      - name: Deploy Functions
        if: needs.changes.outputs.functions == 'true'
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        run: firebase deploy --only functions --project "$FIREBASE_PROJECT_ID" --non-interactive --force

      - name: Setup gcloud
        if: needs.changes.outputs.functions == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Pin env vars on Cloud Run (apiCalendarFetch)
        if: needs.changes.outputs.functions == 'true'
        env:
          GCAL_SA_EMAIL: ${{ secrets.GCAL_SA_EMAIL }}
          GCAL_SA_PRIVATE_KEY: ${{ secrets.GCAL_SA_PRIVATE_KEY }}
        run: |
          gcloud run services update apicalendarfetch \
            --region=us-central1 \
            --platform=managed \
            --set-env-vars="^@@^GCAL_SA_EMAIL=${GCAL_SA_EMAIL}@@GCAL_SA_PRIVATE_KEY=${GCAL_SA_PRIVATE_KEY}" \
            --quiet

      - name: Pin env vars on Cloud Run (sendBulkTicketsEmail)
        if: needs.changes.outputs.functions == 'true'
        env:
          GCAL_SA_EMAIL: ${{ secrets.GCAL_SA_EMAIL }}
          GCAL_SA_PRIVATE_KEY: ${{ secrets.GCAL_SA_PRIVATE_KEY }}
          GMAIL_SENDER: ${{ secrets.GMAIL_SENDER }}
          GMAIL_REPLY_TO: ${{ secrets.GMAIL_REPLY_TO }}
        run: |
          gcloud run services update sendbulkticketsemail \
            --region=us-central1 \
            --platform=managed \
            --allow-unauthenticated \
            --set-env-vars="^@@^GCAL_SA_EMAIL=${GCAL_SA_EMAIL}@@GCAL_SA_PRIVATE_KEY=${GCAL_SA_PRIVATE_KEY}@@GMAIL_SENDER=${GMAIL_SENDER}@@GMAIL_REPLY_TO=${GMAIL_REPLY_TO}@@GMAIL_USE_DOMAIN_DELEGATION=true" \
            --quiet

      - name: Pin env vars on Cloud Run (sendShuttleTicketEmail)
        if: needs.changes.outputs.functions == 'true'
        env:
          GCAL_SA_EMAIL: ${{ secrets.GCAL_SA_EMAIL }}
          GCAL_SA_PRIVATE_KEY: ${{ secrets.GCAL_SA_PRIVATE_KEY }}
          GMAIL_SENDER: ${{ secrets.GMAIL_SENDER }}
          GMAIL_REPLY_TO: ${{ secrets.GMAIL_REPLY_TO }}
        run: |
          gcloud run services update sendshuttleticketemail \
            --region=us-central1 \
            --platform=managed \
            --allow-unauthenticated \
            --set-env-vars="^@@^GCAL_SA_EMAIL=${GCAL_SA_EMAIL}@@GCAL_SA_PRIVATE_KEY=${GCAL_SA_PRIVATE_KEY}@@GMAIL_SENDER=${GMAIL_SENDER}@@GMAIL_REPLY_TO=${GMAIL_REPLY_TO}@@GMAIL_USE_DOMAIN_DELEGATION=true" \
            --quiet

  rules:
    name: Deploy Firestore Rules (rules-only path)
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rules == 'true' && needs.changes.outputs.functions != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@latest

      - name: Validate rules compile (emulator)
        run: npx firebase-tools@latest emulators:exec --only firestore "echo Firestore rules compile ✔️"

      - name: Deploy Firestore Rules
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        run: firebase deploy --only firestore:rules --project "$FIREBASE_PROJECT_ID" --non-interactive

