name: CI + Deploy to Hostinger v2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Create .env file
        run: |
          echo "VITE_CALENDAR_API_KEY=${{ secrets.VITE_CALENDAR_API_KEY }}" >> .env
          echo "VITE_CALENDAR_ID=${{ secrets.VITE_CALENDAR_ID }}" >> .env
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> .env
          echo "VITE_API_SECRET_KEY=${{ secrets.VITE_API_SECRET_KEY }}" >> .env
          echo "VITE_TIME_LOG_CSV=${{ secrets.VITE_TIME_LOG_CSV }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> .env

      - name: Set build version
        run: |
          VERSION=$(date +"%Y.%m.%d")+${GITHUB_SHA::7}
          echo "VITE_APP_VERSION=$VERSION" >> .env
          echo "üì¶ Version set to $VERSION"

      - name: Clear npm cache
        run: npm cache clean --force

      # üëá Ensure a lockfile exists so npm ci can run
      - name: Ensure package-lock.json
        run: |
          if [ ! -f package-lock.json ]; then
            echo "No package-lock.json found; generating one‚Ä¶"
            npm install --package-lock-only --no-audit --no-fund
          fi

      - name: Install deps
        run: npm ci --legacy-peer-deps

      - name: Ensure Vite base path
        run: |
          if grep -q "base" vite.config.js; then
            sed -i "s|base: .*|base: '/',|" vite.config.js
          else
            sed -i "/export default defineConfig({/a\  base: '/'," vite.config.js
          fi
          echo "‚úÖ Vite base path ensured"

      - name: Lint code
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build project
        run: npm run build

      - name: Validate precache manifest
        run: |
          echo "üîç Checking precache manifest..."
          MANIFEST_FILE="dist/sw.js"
          if [ ! -f "$MANIFEST_FILE" ]; then
            echo "‚ùå ERROR: sw.js missing."
            exit 1
          fi
          MISSING=false
          for FILE in $(grep -oP "(?<=url:\s')[^']+" $MANIFEST_FILE || true); do
            if [ ! -f "dist/$FILE" ]; then
              echo "‚ùå Missing file in dist: $FILE"
              MISSING=true
            fi
          done
          if [ "$MISSING" = true ]; then
            echo "‚ùå ERROR: One or more precache files missing."
            exit 1
          fi
          echo "‚úÖ Precache validation passed."

      - name: Verify build output
        run: |
          if [ ! -d "dist/assets" ]; then
            echo "‚ùå ERROR: dist/assets folder is missing ‚Äî build failed or output path incorrect."
            exit 1
          fi
          if ! ls dist/assets/main-*.js 1> /dev/null 2>&1; then
            echo "‚ùå ERROR: No main-*.js file found in dist/assets ‚Äî build hash may have failed."
            exit 1
          fi
          echo "‚úÖ Build verification passed ‚Äî main JS found in dist/assets."

      - name: Verify SW exists (source)
        run: |
          if [ ! -f "src/sw.js" ]; then
            echo "‚ùå ERROR: sw.js missing ‚Äî service worker will fail."
            exit 1
          fi
          echo "‚úÖ Service worker found."

      - name: Write GCP credentials to file
        run: |
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}' > /tmp/gcloud.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Cloud Functions dependencies
        run: |
          cd functions
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi

      - name: Deploy Firebase Cloud Functions
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcloud.json
        run: firebase deploy --only functions --force

      - name: Deploy to Hostinger via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: 145.223.77.125  
          username: u400814892.lakeridepros.xyz  
          password: m;0C&RhL=AL10b!q  
          protocol: ftp
          local-dir: ./dist/
          server-dir: /public_html/
          log-level: minimal
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/*
            **/src/*
