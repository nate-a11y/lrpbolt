rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function authed() {
      return request.auth != null && request.auth.token.email is string;
    }
    function me() {
      return authed() ? lower(request.auth.token.email) : "";
    }
    function roleOf(e) {
      return exists(/databases/$(database)/documents/userAccess/$(e))
        ? lower(get(/databases/$(database)/documents/userAccess/$(e)).data.access)
        : "";
    }
    function myRole() { return roleOf(me()); }
    function isAdmin() { return myRole() == "admin"; }

    // userAccess: user can read self; admins read all; no client writes
    match /userAccess/{email} {
      allow read: if authed() && (me() == email || isAdmin());
      allow write: if false;
    }

    // timeLogs: user owns own docs; admins full read/write
    match /timeLogs/{id} {
      allow read: if authed() && (isAdmin() || resource.data.userEmail == me());
      allow create: if authed() && request.resource.data.userEmail == me();
      allow update: if authed() && (
        isAdmin() ||
        (resource.data.userEmail == me() && request.resource.data.userEmail == me())
      );
      allow delete: if isAdmin();
    }

    // shootoutStats: same pattern as timeLogs
    match /shootoutStats/{id} {
      allow read: if authed() && (isAdmin() || resource.data.userEmail == me());
      allow create: if authed() && request.resource.data.userEmail == me();
      allow update: if authed() && (
        isAdmin() ||
        (resource.data.userEmail == me() && request.resource.data.userEmail == me())
      );
      allow delete: if isAdmin();
    }
  }
}
