rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // KEEP SCHEMA VALIDATION HELPERS
    function authed() { return request.auth != null; }

    function email() {
      return authed() && request.auth.token.email is string
        ? lower(request.auth.token.email)
        : "";
    }

    function role() {
      return authed() && exists(/databases/$(database)/documents/userAccess/$(email()))
        ? get(/databases/$(database)/documents/userAccess/$(email())).data.access
        : "";
    }

    function isAdmin()  { return authed() && lower(role()) == "admin"; }
    function isDriver() { return authed() && lower(role()) == "driver"; }

    function isOwner(data) {
      return authed()
        && data.driverEmail is string
        && lower(data.driverEmail) == email();
    }

    function me() { return email(); }

    // small validators
    function isStrOrNull(v) { return (v is string) || (v == null); }
    function isTsOrNull(v)  { return (v is timestamp) || (v == null); }
    function isNumOrNull(v) { return (v is number) || (v == null); }

    // tolerate legacy "ClaimedBy"/"ClaimedAt" briefly while code normalizes
    function claimedByLower(d) {
      return lower((d.claimedBy != null ? d.claimedBy :
            (d.ClaimedBy != null ? d.ClaimedBy : "")));
    }
    function claimedAtVal(d) {
      return (d.claimedAt != null ? d.claimedAt :
             (d.ClaimedAt != null ? d.ClaimedAt : null));
    }

    // ---------- userAccess ----------
    // Admins manage; any authed user can read their own
    match /userAccess/{userId} {
      allow read: if authed() && (lower(userId) == email() || isAdmin());
      allow create, update, delete: if authed() && isAdmin();
    }

    // userAccessByUid â€“ same idea
    match /userAccessByUid/{uid} {
      allow read: if authed() && (uid == request.auth.uid || isAdmin());
      allow create, update, delete: if authed() && isAdmin();
    }

    // ---------- AdminMeta ----------
    match /AdminMeta/{docId} {
      allow read: if authed();                 // widget reads lastDropDaily
      allow create, update, delete: if false;  // writes occur via Admin SDK in functions
    }

    // ---------- timeLogs ----------
    // App writes: { driverEmail, driver, rideId, startTime, endTime?, duration, loggedAt }
    match /timeLogs/{id} {
      allow read: if authed();
      allow create, update: if authed()
        && request.resource.data.driverEmail is string
        && request.resource.data.driver is string
        && request.resource.data.rideId is string
        && request.resource.data.startTime is timestamp
        && isTsOrNull(request.resource.data.endTime)
        && request.resource.data.duration is number
        && request.resource.data.loggedAt is timestamp;
      allow delete: if authed();
    }

    // ---------- shootoutStats ----------
    // App writes: { driverEmail, vehicle, startTime, endTime?, trips, passengers, createdAt }
    match /shootoutStats/{id} {
      allow read: if authed();
      allow create, update: if authed()
        && request.resource.data.driverEmail is string
        && request.resource.data.vehicle is string
        && request.resource.data.startTime is timestamp
        && isTsOrNull(request.resource.data.endTime)
        && isNumOrNull(request.resource.data.trips)
        && isNumOrNull(request.resource.data.passengers)
        && request.resource.data.createdAt is timestamp;
      allow delete: if authed();
    }

    // ---------- adminLogs ----------
    // Admins only (keep locked)
    match /adminLogs/{id} {
      allow read, create, update, delete: if authed() && isAdmin();
    }

    // ---------- rideQueue ----------
    // Keep schema; open to any authenticated user
    match /rideQueue/{rideId} {
      function validBase(d) {
        return d.pickupTime is timestamp &&
               isNumOrNull(d.rideDuration) &&
               isStrOrNull(d.rideType) &&
               isStrOrNull(d.vehicle) &&
               isStrOrNull(d.rideNotes) &&
               (isStrOrNull(d.claimedBy) || isStrOrNull(d.ClaimedBy)) &&
               isTsOrNull(claimedAtVal(d));
      }
      allow read: if authed();
      allow create, update: if authed() && validBase(request.resource.data);
      allow delete: if authed();
    }

    // ---------- claimedRides ----------
    // Keep schema; open to any authenticated user
    match /claimedRides/{rideId} {
      function validBase(d) {
        return d.pickupTime is timestamp &&
               isNumOrNull(d.rideDuration) &&
               isStrOrNull(d.rideType) &&
               isStrOrNull(d.vehicle) &&
               isStrOrNull(d.rideNotes) &&
               (claimedByLower(d) != "") &&
               claimedAtVal(d) is timestamp;
      }
      allow read: if authed();
      allow create, update: if authed() && validBase(request.resource.data);
      allow delete: if authed();
    }

    // ---------- liveRides ----------
    // Keep schema; open to any authenticated user
    match /liveRides/{rideId} {
      function validBase(d) {
        return d.pickupTime is timestamp &&
               isNumOrNull(d.rideDuration) &&
               isStrOrNull(d.rideType) &&
               isStrOrNull(d.vehicle) &&
               isStrOrNull(d.rideNotes) &&
               (isStrOrNull(d.claimedBy) || isStrOrNull(d.ClaimedBy)) &&
               isTsOrNull(claimedAtVal(d));
      }
      allow read: if authed();
      allow create, update: if authed() && validBase(request.resource.data);
      allow delete: if authed();
    }

    // ---------- tickets ----------
    // Keep schema; open to any authenticated user
    match /tickets/{ticketId} {
      function validBase(d) {
        return d.pickupTime is timestamp &&
               d.passengercount is number &&
               isStrOrNull(d.ticketId) &&
               isStrOrNull(d.passenger) &&
               isStrOrNull(d.pickup) &&
               isStrOrNull(d.dropoff) &&
               isStrOrNull(d.notes) &&
               (d.scannedOutbound is bool) &&
               (d.scannedReturn is bool) &&
               d.createdAt is timestamp &&
               isTsOrNull(d.scannedOutboundAt) &&
               isStrOrNull(d.scannedOutboundBy) &&
               isTsOrNull(d.scannedReturnAt) &&
               isStrOrNull(d.scannedReturnBy);
      }
      allow read: if authed();
      allow create, update: if authed() && validBase(request.resource.data);
      allow delete: if authed();
    }

    // ---------- claimLog / claimFailures ----------
    match /claimLog/{id} {
      allow read: if authed();
      allow create, update: if authed()
        && request.resource.data.driver is string
        && request.resource.data.tripId is string
        && request.resource.data.timestamp is timestamp;
      allow delete: if authed();
    }

    match /claimFailures/{id} {
      allow read: if authed();
      allow create, update: if authed()
        && request.resource.data.tripId is string
        && request.resource.data.driverName is string
        && request.resource.data.attemptedAt is timestamp
        && request.resource.data.reason is string;
      allow delete: if authed();
    }

    // ---------- default deny ----------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
