// Finds files in src/ not referenced from entry points (main/App) including lazy() imports.
// Writes AUDIT_UNUSED.md and optionally moves obvious legacy files to .archive/.
import fs from "fs";
import path from "path";

const ROOT = process.cwd();
const SRC = path.join(ROOT, "src");
const ENTRY = [
  path.join(SRC, "main.jsx"),
  path.join(SRC, "App.jsx"),
];

const READ_EXT = new Set([".js", ".jsx", ".json", ".css", ".svg"]);
const seen = new Set();
const textCache = new Map();

function read(p) {
  if (!fs.existsSync(p)) return "";
  if (textCache.has(p)) return textCache.get(p);
  const s = fs.readFileSync(p, "utf8");
  textCache.set(p, s);
  return s;
}

function resolveImport(fromFile, spec) {
  if (!spec) return null;
  if (spec.startsWith("@/")) spec = path.join(SRC, spec.slice(2));
  else if (spec.startsWith(".")) spec = path.join(path.dirname(fromFile), spec);
  else return null;

  const cand = [
    spec,
    spec + ".js",
    spec + ".jsx",
    path.join(spec, "index.js"),
    path.join(spec, "index.jsx"),
  ];
  return cand.find(fs.existsSync) || null;
}

const IMPORT_RE = /(?:import\s+(?:.+?\s+from\s+)?|require\(|import\()\s*["']([^"']+)["']/g;

function crawl(file) {
  if (!file || seen.has(file)) return;
  seen.add(file);
  if (!READ_EXT.has(path.extname(file))) return;

  const src = read(file);
  let m;
  while ((m = IMPORT_RE.exec(src))) {
    const target = resolveImport(file, m[1]);
    if (target) crawl(target);
  }
}

ENTRY.forEach(crawl);

function walk(dir) {
  const out = [];
  for (const name of fs.readdirSync(dir)) {
    const p = path.join(dir, name);
    const st = fs.statSync(p);
    if (st.isDirectory()) out.push(...walk(p));
    else if (READ_EXT.has(path.extname(p))) out.push(p);
  }
  return out;
}

const all = walk(SRC);
const unused = all.filter((p) => !seen.has(p));

const archiveCandidates = [
  path.join(SRC, "firebase.js"),
  path.join(SRC, "hooks", "index.js"),
]
  .filter(fs.existsSync)
  .filter((p) => !seen.has(p));

const md = [
  "# LRP Audit â€” Possibly Unused Files",
  "",
  "## Candidates (manual review recommended):",
  ...unused.map((p) => `- ${path.relative(ROOT, p)}`),
  "",
  "## Proposed safe archives (auto-moved below):",
  ...archiveCandidates.map((p) => `- ${path.relative(ROOT, p)}`),
  "",
  "_Generated by scripts/unused-report.js_",
].join("\n");

fs.writeFileSync("AUDIT_UNUSED.md", md);

if (archiveCandidates.length) {
  const base = path.join(ROOT, ".archive", "unused");
  fs.mkdirSync(base, { recursive: true });
  for (const src of archiveCandidates) {
    const rel = path.relative(ROOT, src);
    const dst = path.join(base, rel.replace(/^src[\\/]/, ""));
    fs.mkdirSync(path.dirname(dst), { recursive: true });
    fs.renameSync(src, dst);
  }
  console.log("Archived:", archiveCandidates.length, "files to .archive/unused/");
}

console.log("Wrote AUDIT_UNUSED.md with", unused.length, "items.");
